// Code generated by corestoreio/pkg/util/codegen. DO NOT EDIT.
// Generated by sql/dmlgen. DO NOT EDIT.
package dmltestgenerated5

import (
	"context"
	"sort"
	"testing"
	"time"

	"github.com/corestoreio/errors"
	"github.com/corestoreio/pkg/sql/ddl"
	"github.com/corestoreio/pkg/sql/dml"
	"github.com/corestoreio/pkg/sql/dmltest"
	"github.com/corestoreio/pkg/util/assert"
	"github.com/corestoreio/pkg/util/pseudo"
)

func TestNewDBManagerNonDB_27ae1e9c372b14c55c03bdc667b0fb99(t *testing.T) {
	ps := pseudo.MustNewService(0, &pseudo.Options{Lang: "de", MaxFloatDecimals: 6})
	_ = ps
	t.Run("CustomerEntityInt_Empty", func(t *testing.T) {
		e := new(CustomerEntityInt)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, CustomerEntityInt{})
	})
	t.Run("CustomerEntityInt_Copy", func(t *testing.T) {
		e := new(CustomerEntityInt)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("CustomerEntityInts_Validate", func(t *testing.T) {
		c := CustomerEntityInts{Data: []*CustomerEntityInt{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
	t.Run("CustomerEntityVarchar_Empty", func(t *testing.T) {
		e := new(CustomerEntityVarchar)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, CustomerEntityVarchar{})
	})
	t.Run("CustomerEntityVarchar_Copy", func(t *testing.T) {
		e := new(CustomerEntityVarchar)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("CustomerEntityVarchars_Validate", func(t *testing.T) {
		c := CustomerEntityVarchars{Data: []*CustomerEntityVarchar{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
}

func TestNewDBManagerDB_27ae1e9c372b14c55c03bdc667b0fb99(t *testing.T) {
	db := dmltest.MustConnectDB(t)
	defer dmltest.Close(t, db)
	defer dmltest.SQLDumpLoad(t, "../testdata/testCust_*_tables.sql", &dmltest.SQLDumpOptions{
		SkipDBCleanup: true,
	}).Deferred()
	ctx, cancel := context.WithTimeout(context.Background(), time.Minute*2)
	defer cancel()
	tbls, err := NewDBManager(ctx, &DBMOption{TableOptions: []ddl.TableOption{ddl.WithConnPool(db)}})
	assert.NoError(t, err)
	tblNames := tbls.Tables.Tables()
	sort.Strings(tblNames)
	assert.Exactly(t, []string{"customer_address_entity", "customer_entity", "customer_entity_int", "customer_entity_varchar"}, tblNames)
	err = tbls.Validate(ctx)
	assert.NoError(t, err)
	var ps *pseudo.Service
	ps = pseudo.MustNewService(0, &pseudo.Options{Lang: "de", MaxFloatDecimals: 6},
		pseudo.WithTagFakeFunc("website_id", func(maxLen int) any {
			return 1
		}),
		pseudo.WithTagFakeFunc("store_id", func(maxLen int) any {
			return 1
		}),

		pseudo.WithTagFakeFunc("dmltestgenerated.CustomerAddressEntity.ParentID", func(maxLen int) any {
			return nil
		}),
	)
	t.Run("CustomerAddressEntity_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameCustomerAddressEntity)
		selOneRow := tbl.Select("*").Where(
			dml.Column("entity_id").Equal().PlaceHolder(),
		)
		selTenRows := tbl.Select("*").Where(
			dml.Column("entity_id").LessOrEqual().Int(10),
		)
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		entINSERTStmtA := tbls.ConnPool.WithPrepare(ctx, tbl.Insert().BuildValues())
		for i := 0; i < 9; i++ {
			entIn := new(CustomerAddressEntity)
			assert.NoError(t, ps.FakeData(entIn), "Error at index %d", i)
			lID := dmltest.CheckLastInsertID(t, "Error: TestNewTables.CustomerAddressEntity_Entity")(entINSERTStmtA.ExecContext(ctx, dml.Qualify("", entIn)))
			entINSERTStmtA.Reset()
			entOut := new(CustomerAddressEntity)
			rowCount, err := selOneRowDBR.Load(ctx, entOut, lID)
			assert.NoError(t, err)
			assert.Exactly(t, uint64(1), rowCount, "IDX%d: RowCount did not match", i)
			assert.Exactly(t, entIn.EntityID, entOut.EntityID, "IDX%d: EntityID should match", lID)
			assert.Exactly(t, entIn.ParentID, entOut.ParentID, "IDX%d: ParentID should match", lID)
			assert.ExactlyLength(t, 255, &entIn.City, &entOut.City, "IDX%d: City should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Company, &entOut.Company, "IDX%d: Company should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Firstname, &entOut.Firstname, "IDX%d: Firstname should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Lastname, &entOut.Lastname, "IDX%d: Lastname should match", lID)
		}
		dmltest.Close(t, entINSERTStmtA)
		entCol := NewCustomerAddressEntities()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
		colInsertDBR := tbls.ConnPool.WithQueryBuilder(tbl.Insert().Replace().SetRowCount(len(entCol.Data)).BuildValues())
		lID := dmltest.CheckLastInsertID(t, "Error:  CustomerAddressEntities ")(colInsertDBR.ExecContext(ctx, dml.Qualify("", entCol)))
		t.Logf("Last insert ID into: %d", lID)
	})
	t.Run("CustomerEntity_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameCustomerEntity)
		selOneRow := tbl.Select("*").Where(
			dml.Column("entity_id").Equal().PlaceHolder(),
		)
		selTenRows := tbl.Select("*").Where(
			dml.Column("entity_id").LessOrEqual().Int(10),
		)
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		entINSERTStmtA := tbls.ConnPool.WithPrepare(ctx, tbl.Insert().BuildValues())
		for i := 0; i < 9; i++ {
			entIn := new(CustomerEntity)
			assert.NoError(t, ps.FakeData(entIn), "Error at index %d", i)
			lID := dmltest.CheckLastInsertID(t, "Error: TestNewTables.CustomerEntity_Entity")(entINSERTStmtA.ExecContext(ctx, dml.Qualify("", entIn)))
			entINSERTStmtA.Reset()
			entOut := new(CustomerEntity)
			rowCount, err := selOneRowDBR.Load(ctx, entOut, lID)
			assert.NoError(t, err)
			assert.Exactly(t, uint64(1), rowCount, "IDX%d: RowCount did not match", i)
			assert.Exactly(t, entIn.EntityID, entOut.EntityID, "IDX%d: EntityID should match", lID)
			assert.Exactly(t, entIn.WebsiteID, entOut.WebsiteID, "IDX%d: WebsiteID should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Email, &entOut.Email, "IDX%d: Email should match", lID)
		}
		dmltest.Close(t, entINSERTStmtA)
		entCol := NewCustomerEntities()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
		colInsertDBR := tbls.ConnPool.WithQueryBuilder(tbl.Insert().Replace().SetRowCount(len(entCol.Data)).BuildValues())
		lID := dmltest.CheckLastInsertID(t, "Error:  CustomerEntities ")(colInsertDBR.ExecContext(ctx, dml.Qualify("", entCol)))
		t.Logf("Last insert ID into: %d", lID)
	})
	t.Run("CustomerEntityInt_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameCustomerEntityInt)
		selOneRow := tbl.Select("*").Where(
			dml.Column("value_id").Equal().PlaceHolder(),
		)
		selTenRows := tbl.Select("*").Where(
			dml.Column("value_id").LessOrEqual().Int(10),
		)
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		entINSERTStmtA := tbls.ConnPool.WithPrepare(ctx, tbl.Insert().BuildValues())
		for i := 0; i < 9; i++ {
			entIn := new(CustomerEntityInt)
			assert.NoError(t, ps.FakeData(entIn), "Error at index %d", i)
			lID := dmltest.CheckLastInsertID(t, "Error: TestNewTables.CustomerEntityInt_Entity")(entINSERTStmtA.ExecContext(ctx, dml.Qualify("", entIn)))
			entINSERTStmtA.Reset()
			entOut := new(CustomerEntityInt)
			rowCount, err := selOneRowDBR.Load(ctx, entOut, lID)
			assert.NoError(t, err)
			assert.Exactly(t, uint64(1), rowCount, "IDX%d: RowCount did not match", i)
			assert.Exactly(t, entIn.ValueID, entOut.ValueID, "IDX%d: ValueID should match", lID)
			assert.Exactly(t, entIn.AttributeID, entOut.AttributeID, "IDX%d: AttributeID should match", lID)
			assert.Exactly(t, entIn.EntityID, entOut.EntityID, "IDX%d: EntityID should match", lID)
			assert.Exactly(t, entIn.Value, entOut.Value, "IDX%d: Value should match", lID)
		}
		dmltest.Close(t, entINSERTStmtA)
		entCol := NewCustomerEntityInts()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
		colInsertDBR := tbls.ConnPool.WithQueryBuilder(tbl.Insert().Replace().SetRowCount(len(entCol.Data)).BuildValues())
		lID := dmltest.CheckLastInsertID(t, "Error:  CustomerEntityInts ")(colInsertDBR.ExecContext(ctx, dml.Qualify("", entCol)))
		t.Logf("Last insert ID into: %d", lID)
	})
	t.Run("CustomerEntityVarchar_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameCustomerEntityVarchar)
		selOneRow := tbl.Select("*").Where(
			dml.Column("value_id").Equal().PlaceHolder(),
		)
		selTenRows := tbl.Select("*").Where(
			dml.Column("value_id").LessOrEqual().Int(10),
		)
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		entINSERTStmtA := tbls.ConnPool.WithPrepare(ctx, tbl.Insert().BuildValues())
		for i := 0; i < 9; i++ {
			entIn := new(CustomerEntityVarchar)
			assert.NoError(t, ps.FakeData(entIn), "Error at index %d", i)
			lID := dmltest.CheckLastInsertID(t, "Error: TestNewTables.CustomerEntityVarchar_Entity")(entINSERTStmtA.ExecContext(ctx, dml.Qualify("", entIn)))
			entINSERTStmtA.Reset()
			entOut := new(CustomerEntityVarchar)
			rowCount, err := selOneRowDBR.Load(ctx, entOut, lID)
			assert.NoError(t, err)
			assert.Exactly(t, uint64(1), rowCount, "IDX%d: RowCount did not match", i)
			assert.Exactly(t, entIn.ValueID, entOut.ValueID, "IDX%d: ValueID should match", lID)
			assert.Exactly(t, entIn.AttributeID, entOut.AttributeID, "IDX%d: AttributeID should match", lID)
			assert.Exactly(t, entIn.EntityID, entOut.EntityID, "IDX%d: EntityID should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Value, &entOut.Value, "IDX%d: Value should match", lID)
		}
		dmltest.Close(t, entINSERTStmtA)
		entCol := NewCustomerEntityVarchars()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
		colInsertDBR := tbls.ConnPool.WithQueryBuilder(tbl.Insert().Replace().SetRowCount(len(entCol.Data)).BuildValues())
		lID := dmltest.CheckLastInsertID(t, "Error:  CustomerEntityVarchars ")(colInsertDBR.ExecContext(ctx, dml.Qualify("", entCol)))
		t.Logf("Last insert ID into: %d", lID)
	})
	// Uncomment the next line for debugging to see all the queries.
	// t.Logf("queries: %#v", tbls.ConnPool.CachedQueries())
}
