// Code generated by corestoreio/pkg/util/codegen. DO NOT EDIT.
// Generated by sql/dmlgen. DO NOT EDIT.
// +build !ignore
// +build !ignored

package dmltestgenerated

import (
	"context"
	"fmt"
	"sort"
	"testing"
	"time"

	"github.com/corestoreio/errors"
	"github.com/corestoreio/pkg/sql/ddl"
	"github.com/corestoreio/pkg/sql/dml"
	"github.com/corestoreio/pkg/sql/dmltest"
	"github.com/corestoreio/pkg/util/assert"
	"github.com/corestoreio/pkg/util/pseudo"
)

func TestNewDBManagerNonDB_e0543bebb1223430cb42e7b7dd2109cd(t *testing.T) {
	ps := pseudo.MustNewService(0, &pseudo.Options{Lang: "de", MaxFloatDecimals: 6})
	_ = ps
	t.Run("CatalogProductIndexEAVDecimalIDX_Empty", func(t *testing.T) {
		e := new(CatalogProductIndexEAVDecimalIDX)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, CatalogProductIndexEAVDecimalIDX{})
	})
	t.Run("CatalogProductIndexEAVDecimalIDX_Copy", func(t *testing.T) {
		e := new(CatalogProductIndexEAVDecimalIDX)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("CatalogProductIndexEAVDecimalIDXes_Validate", func(t *testing.T) {
		c := CatalogProductIndexEAVDecimalIDXes{Data: []*CatalogProductIndexEAVDecimalIDX{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
	t.Run("CoreConfiguration_Empty", func(t *testing.T) {
		e := new(CoreConfiguration)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, CoreConfiguration{})
	})
	t.Run("CoreConfiguration_Copy", func(t *testing.T) {
		e := new(CoreConfiguration)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("CoreConfigurations_Validate", func(t *testing.T) {
		c := CoreConfigurations{Data: []*CoreConfiguration{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
	t.Run("CustomerAddressEntity_Empty", func(t *testing.T) {
		e := new(CustomerAddressEntity)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, CustomerAddressEntity{})
	})
	t.Run("CustomerAddressEntity_Copy", func(t *testing.T) {
		e := new(CustomerAddressEntity)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("CustomerAddressEntities_Validate", func(t *testing.T) {
		c := CustomerAddressEntities{Data: []*CustomerAddressEntity{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
	t.Run("CustomerEntity_Empty", func(t *testing.T) {
		e := new(CustomerEntity)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, CustomerEntity{})
	})
	t.Run("CustomerEntity_Copy", func(t *testing.T) {
		e := new(CustomerEntity)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("CustomerEntities_Validate", func(t *testing.T) {
		c := CustomerEntities{Data: []*CustomerEntity{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
	t.Run("DmlgenTypes_Empty", func(t *testing.T) {
		e := new(DmlgenTypes)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, DmlgenTypes{})
	})
	t.Run("DmlgenTypes_Copy", func(t *testing.T) {
		e := new(DmlgenTypes)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("DmlgenTypesCollection_Validate", func(t *testing.T) {
		c := DmlgenTypesCollection{Data: []*DmlgenTypes{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
	t.Run("SalesOrderStatusState_Empty", func(t *testing.T) {
		e := new(SalesOrderStatusState)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, SalesOrderStatusState{})
	})
	t.Run("SalesOrderStatusState_Copy", func(t *testing.T) {
		e := new(SalesOrderStatusState)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("SalesOrderStatusStates_Validate", func(t *testing.T) {
		c := SalesOrderStatusStates{Data: []*SalesOrderStatusState{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
	t.Run("ViewCustomerAutoIncrement_Empty", func(t *testing.T) {
		e := new(ViewCustomerAutoIncrement)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, ViewCustomerAutoIncrement{})
	})
	t.Run("ViewCustomerAutoIncrement_Copy", func(t *testing.T) {
		e := new(ViewCustomerAutoIncrement)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("ViewCustomerAutoIncrements_Validate", func(t *testing.T) {
		c := ViewCustomerAutoIncrements{Data: []*ViewCustomerAutoIncrement{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
	t.Run("ViewCustomerNoAutoIncrement_Empty", func(t *testing.T) {
		e := new(ViewCustomerNoAutoIncrement)
		assert.NoError(t, ps.FakeData(e))
		e.Empty()
		assert.Exactly(t, *e, ViewCustomerNoAutoIncrement{})
	})
	t.Run("ViewCustomerNoAutoIncrement_Copy", func(t *testing.T) {
		e := new(ViewCustomerNoAutoIncrement)
		assert.NoError(t, ps.FakeData(e))
		e2 := e.Copy()
		assert.Exactly(t, e, e2)
		assert.NoError(t, ps.FakeData(e))
		assert.NotEqual(t, e, e2)
	})
	t.Run("ViewCustomerNoAutoIncrements_Validate", func(t *testing.T) {
		c := ViewCustomerNoAutoIncrements{Data: []*ViewCustomerNoAutoIncrement{nil}}
		assert.True(t, errors.NotValid.Match(c.Validate()))
	})
}

func TestNewDBManagerDB_e0543bebb1223430cb42e7b7dd2109cd(t *testing.T) {
	db := dmltest.MustConnectDB(t)
	defer dmltest.Close(t, db)
	defer dmltest.SQLDumpLoad(t, "../testdata/testAll_*_tables.sql", &dmltest.SQLDumpOptions{
		SkipDBCleanup: true,
	}).Deferred()
	ctx, cancel := context.WithTimeout(context.Background(), time.Minute*2)
	defer cancel()
	tbls, err := NewDBManager(ctx, &DBMOption{TableOptions: []ddl.TableOption{ddl.WithConnPool(db)}})
	assert.NoError(t, err)
	tblNames := tbls.Tables.Tables()
	sort.Strings(tblNames)
	assert.Exactly(t, []string{"catalog_product_index_eav_decimal_idx", "core_configuration", "customer_address_entity", "customer_entity", "dmlgen_types", "sales_order_status_state", "view_customer_auto_increment", "view_customer_no_auto_increment"}, tblNames)
	err = tbls.Validate(ctx)
	assert.NoError(t, err)
	var ps *pseudo.Service
	ps = pseudo.MustNewService(0, &pseudo.Options{Lang: "de", MaxFloatDecimals: 6},
		pseudo.WithTagFakeFunc("website_id", func(maxLen int) any {
			return 1
		}),
		pseudo.WithTagFakeFunc("store_id", func(maxLen int) any {
			return 1
		}),

		pseudo.WithTagFakeFunc("dmltestgenerated.CustomerAddressEntity.ParentID", func(maxLen int) any {
			return nil
		}),
		pseudo.WithTagFakeFunc("col_date1", func(maxLen int) any {
			if ps.Intn(1000)%3 == 0 {
				return nil
			}
			return ps.Dob18()
		}),
		pseudo.WithTagFakeFunc("col_date2", func(maxLen int) any {
			t, _ := ps.Dob18().MarshalText()
			return t
		}),
		pseudo.WithTagFakeFunc("col_decimal101", func(maxLen int) any {
			return fmt.Sprintf("%.1f", ps.Price())
		}),
		pseudo.WithTagFakeFunc("price_b124", func(maxLen int) any {
			return fmt.Sprintf("%.4f", ps.Price())
		}),
		pseudo.WithTagFakeFunc("col_decimal123", func(maxLen int) any {
			return fmt.Sprintf("%.3f", ps.Float64())
		}),
		pseudo.WithTagFakeFunc("col_decimal206", func(maxLen int) any {
			return fmt.Sprintf("%.6f", ps.Float64())
		}),
		pseudo.WithTagFakeFunc("col_decimal2412", func(maxLen int) any {
			return fmt.Sprintf("%.12f", ps.Float64())
		}),
		pseudo.WithTagFakeFuncAlias(
			"col_decimal124", "price_b124",
			"price_a124", "price_b124",
			"col_float", "col_decimal206",
		),
	)
	t.Run("CatalogProductIndexEAVDecimalIDX_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameCatalogProductIndexEAVDecimalIDX)
		selOneRow := tbl.Select("*").Where()
		selTenRows := tbl.Select("*").Where()
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		// this table/view does not support auto_increment
		entCol := NewCatalogProductIndexEAVDecimalIDXes()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
	})
	t.Run("CoreConfiguration_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameCoreConfiguration)
		selOneRow := tbl.Select("*").Where(
			dml.Column("config_id").Equal().PlaceHolder(),
		)
		selTenRows := tbl.Select("*").Where(
			dml.Column("config_id").LessOrEqual().Int(10),
		)
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		entINSERTStmtA := tbls.ConnPool.WithPrepare(ctx, tbl.Insert().BuildValues())
		for i := 0; i < 9; i++ {
			entIn := new(CoreConfiguration)
			assert.NoError(t, ps.FakeData(entIn), "Error at index %d", i)
			lID := dmltest.CheckLastInsertID(t, "Error: TestNewTables.CoreConfiguration_Entity")(entINSERTStmtA.ExecContext(ctx, dml.Qualify("", entIn)))
			entINSERTStmtA.Reset()
			entOut := new(CoreConfiguration)
			rowCount, err := selOneRowDBR.Load(ctx, entOut, lID)
			assert.NoError(t, err)
			assert.Exactly(t, uint64(1), rowCount, "IDX%d: RowCount did not match", i)
			assert.Exactly(t, entIn.ConfigID, entOut.ConfigID, "IDX%d: ConfigID should match", lID)
			assert.ExactlyLength(t, 8, &entIn.Scope, &entOut.Scope, "IDX%d: Scope should match", lID)
			assert.Exactly(t, entIn.ScopeID, entOut.ScopeID, "IDX%d: ScopeID should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Path, &entOut.Path, "IDX%d: Path should match", lID)
			assert.ExactlyLength(t, 65535, &entIn.Value, &entOut.Value, "IDX%d: Value should match", lID)
		}
		dmltest.Close(t, entINSERTStmtA)
		entCol := NewCoreConfigurations()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
		colInsertDBR := tbls.ConnPool.WithQueryBuilder(tbl.Insert().Replace().SetRowCount(len(entCol.Data)).BuildValues())
		lID := dmltest.CheckLastInsertID(t, "Error:  CoreConfigurations ")(colInsertDBR.ExecContext(ctx, dml.Qualify("", entCol)))
		t.Logf("Last insert ID into: %d", lID)
	})
	t.Run("CustomerAddressEntity_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameCustomerAddressEntity)
		selOneRow := tbl.Select("*").Where(
			dml.Column("entity_id").Equal().PlaceHolder(),
		)
		selTenRows := tbl.Select("*").Where(
			dml.Column("entity_id").LessOrEqual().Int(10),
		)
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		entINSERTStmtA := tbls.ConnPool.WithPrepare(ctx, tbl.Insert().BuildValues())
		for i := 0; i < 9; i++ {
			entIn := new(CustomerAddressEntity)
			assert.NoError(t, ps.FakeData(entIn), "Error at index %d", i)
			lID := dmltest.CheckLastInsertID(t, "Error: TestNewTables.CustomerAddressEntity_Entity")(entINSERTStmtA.ExecContext(ctx, dml.Qualify("", entIn)))
			entINSERTStmtA.Reset()
			entOut := new(CustomerAddressEntity)
			rowCount, err := selOneRowDBR.Load(ctx, entOut, lID)
			assert.NoError(t, err)
			assert.Exactly(t, uint64(1), rowCount, "IDX%d: RowCount did not match", i)
			assert.Exactly(t, entIn.EntityID, entOut.EntityID, "IDX%d: EntityID should match", lID)
			assert.ExactlyLength(t, 50, &entIn.IncrementID, &entOut.IncrementID, "IDX%d: IncrementID should match", lID)
			assert.Exactly(t, entIn.ParentID, entOut.ParentID, "IDX%d: ParentID should match", lID)
			assert.Exactly(t, entIn.IsActive, entOut.IsActive, "IDX%d: IsActive should match", lID)
			assert.ExactlyLength(t, 255, &entIn.City, &entOut.City, "IDX%d: City should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Company, &entOut.Company, "IDX%d: Company should match", lID)
			assert.ExactlyLength(t, 255, &entIn.CountryID, &entOut.CountryID, "IDX%d: CountryID should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Firstname, &entOut.Firstname, "IDX%d: Firstname should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Lastname, &entOut.Lastname, "IDX%d: Lastname should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Postcode, &entOut.Postcode, "IDX%d: Postcode should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Region, &entOut.Region, "IDX%d: Region should match", lID)
			assert.ExactlyLength(t, 65535, &entIn.Street, &entOut.Street, "IDX%d: Street should match", lID)
		}
		dmltest.Close(t, entINSERTStmtA)
		entCol := NewCustomerAddressEntities()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
		colInsertDBR := tbls.ConnPool.WithQueryBuilder(tbl.Insert().Replace().SetRowCount(len(entCol.Data)).BuildValues())
		lID := dmltest.CheckLastInsertID(t, "Error:  CustomerAddressEntities ")(colInsertDBR.ExecContext(ctx, dml.Qualify("", entCol)))
		t.Logf("Last insert ID into: %d", lID)
	})
	t.Run("CustomerEntity_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameCustomerEntity)
		selOneRow := tbl.Select("*").Where(
			dml.Column("entity_id").Equal().PlaceHolder(),
		)
		selTenRows := tbl.Select("*").Where(
			dml.Column("entity_id").LessOrEqual().Int(10),
		)
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		entINSERTStmtA := tbls.ConnPool.WithPrepare(ctx, tbl.Insert().BuildValues())
		for i := 0; i < 9; i++ {
			entIn := new(CustomerEntity)
			assert.NoError(t, ps.FakeData(entIn), "Error at index %d", i)
			lID := dmltest.CheckLastInsertID(t, "Error: TestNewTables.CustomerEntity_Entity")(entINSERTStmtA.ExecContext(ctx, dml.Qualify("", entIn)))
			entINSERTStmtA.Reset()
			entOut := new(CustomerEntity)
			rowCount, err := selOneRowDBR.Load(ctx, entOut, lID)
			assert.NoError(t, err)
			assert.Exactly(t, uint64(1), rowCount, "IDX%d: RowCount did not match", i)
			assert.Exactly(t, entIn.EntityID, entOut.EntityID, "IDX%d: EntityID should match", lID)
			assert.Exactly(t, entIn.WebsiteID, entOut.WebsiteID, "IDX%d: WebsiteID should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Email, &entOut.Email, "IDX%d: Email should match", lID)
			assert.Exactly(t, entIn.GroupID, entOut.GroupID, "IDX%d: GroupID should match", lID)
			assert.Exactly(t, entIn.StoreID, entOut.StoreID, "IDX%d: StoreID should match", lID)
			assert.Exactly(t, entIn.IsActive, entOut.IsActive, "IDX%d: IsActive should match", lID)
			assert.ExactlyLength(t, 255, &entIn.CreatedIn, &entOut.CreatedIn, "IDX%d: CreatedIn should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Firstname, &entOut.Firstname, "IDX%d: Firstname should match", lID)
			assert.ExactlyLength(t, 255, &entIn.Lastname, &entOut.Lastname, "IDX%d: Lastname should match", lID)
			assert.ExactlyLength(t, 128, &entIn.passwordHash, &entOut.passwordHash, "IDX%d: passwordHash should match", lID)
			assert.ExactlyLength(t, 128, &entIn.RpToken, &entOut.RpToken, "IDX%d: RpToken should match", lID)
			assert.Exactly(t, entIn.DefaultBilling, entOut.DefaultBilling, "IDX%d: DefaultBilling should match", lID)
			assert.Exactly(t, entIn.DefaultShipping, entOut.DefaultShipping, "IDX%d: DefaultShipping should match", lID)
			assert.Exactly(t, entIn.Gender, entOut.Gender, "IDX%d: Gender should match", lID)
		}
		dmltest.Close(t, entINSERTStmtA)
		entCol := NewCustomerEntities()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
		colInsertDBR := tbls.ConnPool.WithQueryBuilder(tbl.Insert().Replace().SetRowCount(len(entCol.Data)).BuildValues())
		lID := dmltest.CheckLastInsertID(t, "Error:  CustomerEntities ")(colInsertDBR.ExecContext(ctx, dml.Qualify("", entCol)))
		t.Logf("Last insert ID into: %d", lID)
	})
	t.Run("DmlgenTypes_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameDmlgenTypes)
		selOneRow := tbl.Select("*").Where(
			dml.Column("id").Equal().PlaceHolder(),
		)
		selTenRows := tbl.Select("*").Where(
			dml.Column("id").LessOrEqual().Int(10),
		)
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		entINSERTStmtA := tbls.ConnPool.WithPrepare(ctx, tbl.Insert().BuildValues())
		for i := 0; i < 9; i++ {
			entIn := new(DmlgenTypes)
			assert.NoError(t, ps.FakeData(entIn), "Error at index %d", i)
			lID := dmltest.CheckLastInsertID(t, "Error: TestNewTables.DmlgenTypes_Entity")(entINSERTStmtA.ExecContext(ctx, dml.Qualify("", entIn)))
			entINSERTStmtA.Reset()
			entOut := new(DmlgenTypes)
			rowCount, err := selOneRowDBR.Load(ctx, entOut, lID)
			assert.NoError(t, err)
			assert.Exactly(t, uint64(1), rowCount, "IDX%d: RowCount did not match", i)
			assert.Exactly(t, entIn.ID, entOut.ID, "IDX%d: ID should match", lID)
			assert.Exactly(t, entIn.ColBigint1, entOut.ColBigint1, "IDX%d: ColBigint1 should match", lID)
			assert.Exactly(t, entIn.ColBigint2, entOut.ColBigint2, "IDX%d: ColBigint2 should match", lID)
			assert.Exactly(t, entIn.ColBigint3, entOut.ColBigint3, "IDX%d: ColBigint3 should match", lID)
			assert.Exactly(t, entIn.ColBigint4, entOut.ColBigint4, "IDX%d: ColBigint4 should match", lID)
			assert.ExactlyLength(t, 65535, &entIn.ColBlob, &entOut.ColBlob, "IDX%d: ColBlob should match", lID)
			assert.Exactly(t, entIn.ColDecimal101, entOut.ColDecimal101, "IDX%d: ColDecimal101 should match", lID)
			assert.Exactly(t, entIn.ColDecimal124, entOut.ColDecimal124, "IDX%d: ColDecimal124 should match", lID)
			assert.Exactly(t, entIn.PriceA124, entOut.PriceA124, "IDX%d: PriceA124 should match", lID)
			assert.Exactly(t, entIn.PriceB124, entOut.PriceB124, "IDX%d: PriceB124 should match", lID)
			assert.Exactly(t, entIn.ColDecimal123, entOut.ColDecimal123, "IDX%d: ColDecimal123 should match", lID)
			assert.Exactly(t, entIn.ColDecimal206, entOut.ColDecimal206, "IDX%d: ColDecimal206 should match", lID)
			assert.Exactly(t, entIn.ColDecimal2412, entOut.ColDecimal2412, "IDX%d: ColDecimal2412 should match", lID)
			assert.Exactly(t, entIn.ColInt1, entOut.ColInt1, "IDX%d: ColInt1 should match", lID)
			assert.Exactly(t, entIn.ColInt2, entOut.ColInt2, "IDX%d: ColInt2 should match", lID)
			assert.Exactly(t, entIn.ColInt3, entOut.ColInt3, "IDX%d: ColInt3 should match", lID)
			assert.Exactly(t, entIn.ColInt4, entOut.ColInt4, "IDX%d: ColInt4 should match", lID)
			assert.ExactlyLength(t, 4294967295, &entIn.ColLongtext1, &entOut.ColLongtext1, "IDX%d: ColLongtext1 should match", lID)
			assert.ExactlyLength(t, 4294967295, &entIn.ColLongtext2, &entOut.ColLongtext2, "IDX%d: ColLongtext2 should match", lID)
			assert.ExactlyLength(t, 16777215, &entIn.ColMediumblob, &entOut.ColMediumblob, "IDX%d: ColMediumblob should match", lID)
			assert.ExactlyLength(t, 16777215, &entIn.ColMediumtext1, &entOut.ColMediumtext1, "IDX%d: ColMediumtext1 should match", lID)
			assert.ExactlyLength(t, 16777215, &entIn.ColMediumtext2, &entOut.ColMediumtext2, "IDX%d: ColMediumtext2 should match", lID)
			assert.Exactly(t, entIn.ColSmallint1, entOut.ColSmallint1, "IDX%d: ColSmallint1 should match", lID)
			assert.Exactly(t, entIn.ColSmallint2, entOut.ColSmallint2, "IDX%d: ColSmallint2 should match", lID)
			assert.Exactly(t, entIn.ColSmallint3, entOut.ColSmallint3, "IDX%d: ColSmallint3 should match", lID)
			assert.Exactly(t, entIn.ColSmallint4, entOut.ColSmallint4, "IDX%d: ColSmallint4 should match", lID)
			assert.Exactly(t, entIn.HasSmallint5, entOut.HasSmallint5, "IDX%d: HasSmallint5 should match", lID)
			assert.Exactly(t, entIn.IsSmallint5, entOut.IsSmallint5, "IDX%d: IsSmallint5 should match", lID)
			assert.ExactlyLength(t, 65535, &entIn.ColText, &entOut.ColText, "IDX%d: ColText should match", lID)
			assert.Exactly(t, entIn.ColTinyint1, entOut.ColTinyint1, "IDX%d: ColTinyint1 should match", lID)
			assert.ExactlyLength(t, 1, &entIn.ColVarchar1, &entOut.ColVarchar1, "IDX%d: ColVarchar1 should match", lID)
			assert.ExactlyLength(t, 100, &entIn.ColVarchar100, &entOut.ColVarchar100, "IDX%d: ColVarchar100 should match", lID)
			assert.ExactlyLength(t, 16, &entIn.ColVarchar16, &entOut.ColVarchar16, "IDX%d: ColVarchar16 should match", lID)
			assert.ExactlyLength(t, 21, &entIn.ColChar1, &entOut.ColChar1, "IDX%d: ColChar1 should match", lID)
			assert.ExactlyLength(t, 17, &entIn.ColChar2, &entOut.ColChar2, "IDX%d: ColChar2 should match", lID)
		}
		dmltest.Close(t, entINSERTStmtA)
		entCol := NewDmlgenTypesCollection()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
		colInsertDBR := tbls.ConnPool.WithQueryBuilder(tbl.Insert().Replace().SetRowCount(len(entCol.Data)).BuildValues())
		lID := dmltest.CheckLastInsertID(t, "Error:  DmlgenTypesCollection ")(colInsertDBR.ExecContext(ctx, dml.Qualify("", entCol)))
		t.Logf("Last insert ID into: %d", lID)
	})
	t.Run("SalesOrderStatusState_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameSalesOrderStatusState)
		selOneRow := tbl.Select("*").Where()
		selTenRows := tbl.Select("*").Where()
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		// this table/view does not support auto_increment
		entCol := NewSalesOrderStatusStates()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
	})
	t.Run("ViewCustomerAutoIncrement_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameViewCustomerAutoIncrement)
		selOneRow := tbl.Select("*").Where()
		selTenRows := tbl.Select("*").Where()
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		// this table/view does not support auto_increment
		entCol := NewViewCustomerAutoIncrements()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
	})
	t.Run("ViewCustomerNoAutoIncrement_Entity", func(t *testing.T) {
		tbl := tbls.MustTable(TableNameViewCustomerNoAutoIncrement)
		selOneRow := tbl.Select("*").Where()
		selTenRows := tbl.Select("*").Where()
		selOneRowDBR := tbls.ConnPool.WithPrepare(ctx, selOneRow)
		defer selOneRowDBR.Close()
		selTenRowsDBR := tbls.ConnPool.WithQueryBuilder(selTenRows)
		// this table/view does not support auto_increment
		entCol := NewViewCustomerNoAutoIncrements()
		rowCount, err := selTenRowsDBR.Load(ctx, entCol)
		assert.NoError(t, err)
		t.Logf("Collection load rowCount: %d", rowCount)
	})
	// Uncomment the next line for debugging to see all the queries.
	// t.Logf("queries: %#v", tbls.ConnPool.CachedQueries())
}
