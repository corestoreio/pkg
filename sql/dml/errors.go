// Copyright 2015-present, Cyrill @ Schumacher.fm and the CoreStore contributors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package dml

import (
	"errors"
	"fmt"

	"github.com/go-sql-driver/mysql"
)

type Error struct {
	Err     error
	Message string
	Marker  string
	Query   string
}

func (e *Error) Error() string {
	msg := e.Message
	if msg == "" {
		msg = "failed"
	}
	return fmt.Sprintf("{%s} %s with error: %s", e.Marker, msg, e.Err)
}

func (e *Error) Unwrap() error {
	return e.Err
}

// MySQLNumberFromError returns the error code number from an error. The error
// has been generated by the driver go-sql-driver/mysql. A list of error codes
// can be accessed here: https://mariadb.com/kb/en/mariadb-error-codes/ Returns
// 0 if the type of error is not *mysql.MySQLError.
func MySQLNumberFromError(err error) uint16 {
	var myErr *mysql.MySQLError
	if errors.As(err, &myErr) {
		return myErr.Number
	}
	return 0
}

// MySQLMessageFromError returns the textual message of the MySQL error. The
// error has been generated by the driver go-sql-driver/mysql. Returns an empty
// string if the type of error is not *mysql.MySQLError.
func MySQLMessageFromError(err error) string {
	var myErr *mysql.MySQLError
	if errors.As(err, &myErr) {
		return myErr.Message
	}
	return ""
}
